syntax = "proto3";

import "google/protobuf/descriptor.proto";

extend google.protobuf.FieldOptions {
	bool is_required = 60000;
}


package opsee;

option java_package = "co.opsee.proto";
option java_multiple_files = true;
option java_outer_classname = "BastionProto";

service Checker {
	rpc TestCheck(TestCheckRequest) returns (TestCheckResponse) {}
	rpc CreateCheck(CheckResourceRequest) returns (ResourceResponse) {}
	rpc RetrieveCheck(CheckResourceRequest) returns (ResourceResponse) {}
	rpc UpdateCheck(CheckResourceRequest) returns (ResourceResponse) {}
	rpc DeleteCheck(CheckResourceRequest) returns (ResourceResponse) {}
}

message Any {
	string type_url = 1 [(is_required)=true]; //required
	bytes value = 2 [(is_required)=true]; //required
}

message Timestamp {
	int64 seconds = 1 [(is_required)=true]; //required
	int64 nanos = 2;
}

message Error {
    string errorCode = 1;
    string errorMessage = 2;
}

message Target {
	string name = 1;
	string type = 2 [(is_required)=true]; //required
	string id = 3 [(is_required)=true]; //required
	string address = 4;
}

message Check {
	string id = 1;
	int32 interval = 2 [(is_required)=true]; //required
	Target target = 3 [(is_required)=true]; //required
	Timestamp last_run = 4;
	Any check_spec = 5 [(is_required)=true]; //required
	string name = 6 [(is_required)=true]; //required
  repeated Assertion assertions = 7;
  repeated CheckResult results = 8;
}

message Assertion {
	// key is one of "code", "header", "body".
	string key = 1 [(is_required)=true];
  // In the case of key=header, value would be the header field.
  string value = 2;
  // relationship is one of: "equal" "notEqual" "empty" "notEmpty" "contain" "notContain" "regExp"
  // we don't use an enum, because proto3 support is not super great.
  string relationship = 3 [(is_required)=true];
  string operand = 4;
}

message Header {
	string name = 1 [(is_required)=true]; //required
	repeated string values = 2;
}

message HttpCheck {
	string name = 1; //deprecated
	string path = 2 [(is_required)=true]; //required
	string protocol = 3 [(is_required)=true]; //required
	int32 port = 4 [(is_required)=true]; //required
	string verb = 5 [(is_required)=true]; //required
	repeated Header headers = 6;
	string body = 7;
}

message CloudWatchCheck {
	repeated CloudWatchMetric metrics = 1;
}

message CloudWatchMetric {
	string namespace = 1;
	string name = 2;
}

message CloudWatchResponse {
	// The AWS CloudWatch metric namespace, e.g. AWS/RDS
	string namespace = 1;
	repeated Metric metrics = 2;
    repeated Error errors = 3; // code field corresponds to MetricName
}

message Tag {
	string name = 1;
	string value = 2;
}

message Metric {
	string name = 1;
	double value = 2;
	repeated Tag tags = 3;
	Timestamp timestamp = 4;
	string unit = 5;	  // kbps, percent, ...
	string statistic = 6; // average, sum, ...
}

message HttpResponse {
	int32 code = 1;
	string body = 2;
	repeated Header headers = 3;
	repeated Metric metrics = 4;
	string host = 5;
}

message CheckResourceResponse {
	string id = 1;
	Check check = 2;
	string error = 3;
}

message ResourceResponse {
	repeated CheckResourceResponse responses = 1;
}

message CheckResourceRequest {
	repeated Check checks = 1;
}

message ResultsResource {
  repeated CheckResult results = 1;
}

message TestCheckRequest {
	int32 max_hosts = 1 [(is_required)=true];
	Timestamp deadline = 2 [(is_required)=true];
	Check check = 3 [(is_required)=true];
}

message TestCheckResponse {
	repeated CheckResponse responses = 1;
	string error = 2;
}

message CheckResponse {
	Target target = 1;
	Any response = 2;
	string error = 3;
	bool passing = 4;
}

message CheckResult {
	string check_id = 1;
	string customer_id = 2;
	Timestamp timestamp = 3;
	bool passing = 4;
	repeated CheckResponse responses = 5;
	Target target = 6;
	string check_name = 7;
  int32 version = 8;
}

message DiscoveryEvent {
	string customer_id = 1;
	Timestamp timestamp = 2;
	string type = 3;
	string resource = 4;
}
